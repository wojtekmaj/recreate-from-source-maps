const path = require('path');
const _ = require('lodash');

const findNodeModules = require('./find_node_modules');
const { addDependencyInPackageJson } = require('./handle_package_json');

const semver =
  /(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?/;

const extractNodeModules = ({ files, projectName }) =>
  new Promise((resolve) => {
    let nodeModules = [];
    const fileNames = Object.keys(files);

    const findNodeModule = (nodeModuleName) =>
      fileNames.filter((moduleName) =>
        moduleName.includes(path.join('node_modules', nodeModuleName)),
      );

    Object.entries(files).forEach(([fileName, data]) => {
      if (fileName.split(path.sep).includes('node_modules')) {
        return;
      }

      const foundPotentialNodeModules = findNodeModules(data);
      const foundNodeModules = foundPotentialNodeModules.filter(
        (potentialNodeModule) => findNodeModule(potentialNodeModule).length,
      );

      nodeModules.push(...foundNodeModules);
    });
    nodeModules = _.uniq(nodeModules);

    const foundNodeModulesWithVersions = nodeModules.reduce((obj, foundNodeModule) => {
      const nodeModuleFilenames = findNodeModule(foundNodeModule);
      const nodeModuleFiles = nodeModuleFilenames.map((filename) => files[filename]);

      const filesBeginningWithComments = nodeModuleFiles.filter((source) =>
        source.startsWith('/*'),
      );
      const filesComments = filesBeginningWithComments.map((fileBeginningWithComment) =>
        fileBeginningWithComment.slice(0, fileBeginningWithComment.indexOf('*/') + 2),
      );
      const versions = _.uniq(
        filesComments
          .map((fileComment) => {
            const match = fileComment.match(semver);
            return match && match[0];
          })
          .filter(Boolean),
      );

      // If there's exactly one unique valid semver version in file comment,
      // assume it's a package version. Otherwise, we can't be sure.
      return {
        ...obj,
        [foundNodeModule]: versions.length === 1 ? versions[0] : null,
      };
    }, {});

    Object.entries(foundNodeModulesWithVersions).forEach(([dependency, version]) =>
      addDependencyInPackageJson({
        dependency,
        projectName,
        version,
      }),
    );

    resolve(nodeModules);
  });

module.exports = extractNodeModules;
